<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冗码生涯</title>
  <subtitle>只有做不好事的人，没有做不好的事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-30T01:48:26.825Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LJaer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Hexo搭建博客（三），博客的部件和插件</title>
    <link href="http://yoursite.com/2016/09/29/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%8C%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%83%A8%E4%BB%B6%E5%92%8C%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/09/29/使用Hexo搭建博客（三），博客的部件和插件/</id>
    <published>2016-09-29T03:17:20.000Z</published>
    <updated>2016-09-30T01:48:26.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、博客的零部件"><a href="#一、博客的零部件" class="headerlink" title="一、博客的零部件"></a>一、博客的零部件</h2><h3 id="1-添加『友情链接』"><a href="#1-添加『友情链接』" class="headerlink" title="1.添加『友情链接』"></a>1.添加『友情链接』</h3><p>　　友情链接的文件在pacman/layout/_widget/links.ejs文件里面添加，同样需要在主题配置文件中设置显示。在<ul>和</ul>标签之间添加，格式参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;linkslist&quot;&gt;</div><div class="line">  &lt;p class=&quot;asidetitle&quot;&gt;&lt;%= __(&apos;links&apos;) %&gt;&lt;/p&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zk673820543&quot; target=&quot;_blank&quot; title=&quot;CSDN&quot;&gt;zk的CSDN博客&lt;/a&gt;&lt;/li&gt;</div><div class="line">      &lt;li&gt;&lt;a href=&quot;https://github.com/LJaer&quot; target=&quot;_blank&quot; title=&quot;GitHub&quot;&gt;LJaer的github&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>　　在pacman/_config.yml文件中，添加links<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">widgets: </div><div class="line">- links</div></pre></td></tr></table></figure></p>
<h3 id="2-添加『新浪微博秀』"><a href="#2-添加『新浪微博秀』" class="headerlink" title="2.添加『新浪微博秀』"></a>2.添加<a href="http://app.weibo.com/tool/weiboshow" title="『新浪微博秀』" target="_blank" rel="external">『新浪微博秀』</a></h3><p>　　微博秀这个可以根据个人的意愿。先在<a href="http://app.weibo.com/tool/weiboshow" title="微博秀" target="_blank" rel="external">微博秀</a>开通一下。获取到如下代码：把得到的代码直接保存到pacman/layout/_widget/weibo.ejs文件里，没有就新建一个；在主题配置文件pacman/_config.yml的部件里加上微博秀。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">widgets:</div><div class="line">- weibo</div></pre></td></tr></table></figure></p>
<h3 id="3-添加『JiaThis分享』"><a href="#3-添加『JiaThis分享』" class="headerlink" title="3.添加『JiaThis分享』"></a>3.添加<a href="http://www.jiathis.com/" title="『JiaThis分享』" target="_blank" rel="external">『JiaThis分享』</a></h3><p>　　博客在前期需要大量推广，即使你写的文章再好，别人也不一定能看到，或者别人看到了也不会认真阅读，这是正常的。不妨主动自己主动一点，把自己的文章推广一下，也能帮助自己博客提高访问量。微博、微信和QQ空间都是很好的传播平台，需要利用好。所以就需要一键分享的功能。不少人用的百度的，但个人对JiaThis更感兴趣一点。样式多，支持平台多，重要的是方便。<br>注册之后得到了id，把id添加到pacman/layout/_partial/post/jiathis.ejs文件中；没改动的话是在第22行的uid那里。<br>再在主题配置文件中jiathis的enable改为true启用，也同样填上id。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#### Share button</div><div class="line">jiathis:</div><div class="line">  enable: true ## if you use jiathis as your share tool,the built-in share tool won&apos;t be display.</div><div class="line">  id: 2111669   ## e.g. 1501277 your jiathis ID. </div><div class="line">  tsina: 2554366815 ## e.g. 1664838973 Your weibo id,It will be used in share button.</div></pre></td></tr></table></figure></p>
<h3 id="4-添加『多说评论』"><a href="#4-添加『多说评论』" class="headerlink" title="4.添加『多说评论』"></a>4.添加<a href="http://duoshuo.com/" title="『多说评论』" target="_blank" rel="external">『多说评论』</a></h3><p>　　静态博客要使用第三方评论系统，pacman配置了多说评论系统（/themes/pacman/_config.yml），默认关闭，只要将其打开即可:false-&gt;true。直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，即可发表平评论。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#### Comment</div><div class="line">duoshuo: </div><div class="line">  enable: true  ## duoshuo.com</div><div class="line">  short_name: ljaer   ## duoshuo short name.即为注册时，域名xxx.duoshuo.com的xxx</div></pre></td></tr></table></figure></p>
<h3 id="1-添加『微搜索』"><a href="#1-添加『微搜索』" class="headerlink" title="1.添加『微搜索』"></a>1.添加『微搜索』</h3><p>　　现在的文章还不多，使用目录和标签就可以快速找到文章，这是一种方式。对于习惯用搜索的用户来说，特别是后续文章积累到一定的程度之后，想要快速找到自己想看到的文章就比较困难，我自己就希望实现站内搜索的功能。而静态网页和动态的诸如Wordpress不同，内置的谷歌搜索，但是显然在国内直接不能实现站内搜索的，你需要采取其他的措施。查询了一下，使用百度和swiftype都可以为Hexo实现站内搜索。<br>　　swiftype老是提示Please use your work email，注册不成功。这里我使用<a href="http://zn.baidu.com/cse/wiki/index?category_id=17" title="百度站内搜索" target="_blank" rel="external">百度站内搜索</a>。</p>
<p>1.注册之后得到key，然后把key填到到D:\Hexo\themes\jacman\layout_partial\tinysou_search.ejs文件；<br>engineKey: ‘’  #e.g.  ‘eb4726b2a0ea6b569b79’<br>2.把主题配置文件_config.yml修改启用，填上你的id就可以。</p>
<p>tinysou_search:     ## <a href="http://tinysou.com/" target="_blank" rel="external">http://tinysou.com/</a><br>  enable: true<br>  id:  ## e.g. eb4726b2a0ea6b569b79  for your tiny search id</p>
<h2 id="二、Hexo的几款插件"><a href="#二、Hexo的几款插件" class="headerlink" title="二、Hexo的几款插件"></a>二、Hexo的几款插件</h2><p>　　Hexo里面默认有一些插件，这里推荐几款可能对个人有用的插件。输入对应的命令安装一下，然后设置一下就可以。</p>
<p>###１.添加『RSS订阅』和『百度sitemap』<br>　　RSS订阅和百度sitemap（站点地图，方便搜索引擎的收录）的安装和设置做法相似，所以放在一起说明。输入的命令分别是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>　　然后在博客配置文件修改Hexo_config.yml中添加启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Plugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure></p>
<p>　　对于百度地图，还需要添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sitemap</div><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>　　添加好了之后，测试一下RSS和百度地图是否生效，百度地图是访问<a href="http://localhost:4000/baidusitemap.xml可以查看，如果能正常访问说明可用。" target="_blank" rel="external">http://localhost:4000/baidusitemap.xml可以查看，如果能正常访问说明可用。</a></p>
<h3 id="2-添加『CNZZ统计』"><a href="#2-添加『CNZZ统计』" class="headerlink" title="2.添加『CNZZ统计』"></a>2.添加『CNZZ统计』</h3><p>　　CNZZ统计不算是Hexo的插件，但我个人觉得还是充当了插件的作用，所以就放在了这里。做法是先注册账号，然后添加网址就设置好了。<br>1.在CNZZ网站注册一个账号，添加网站后，得到各个形式的代码，任选其一；<br>2.在Hexo\themes\pacman\layout_partial文件夹下新建一个cnzz_tongji.ejs文件，把你的代码粘贴在第一行和最后一行之间（中间是我的，替换成你自己的）；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;% if (theme.cnzz)&#123; %&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; http://&quot;);document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1260464597&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s95.cnzz.com/z_stat.php%3Fid%3D1260464597%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));&lt;/script&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>3.在footer.ejs文件中适当的位置添加你的代码，这是我的代码；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; http://&quot;);document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1260464597&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s95.cnzz.com/z_stat.php%3Fid%3D1260464597%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>4.在主题配置文件中加入下面代码启用CNZZ统计，注意不要添加站点id，填了的话就不显示图标了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#### Analytics</div><div class="line">cnzz_tongji: true</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、博客的零部件&quot;&gt;&lt;a href=&quot;#一、博客的零部件&quot; class=&quot;headerlink&quot; title=&quot;一、博客的零部件&quot;&gt;&lt;/a&gt;一、博客的零部件&lt;/h2&gt;&lt;h3 id=&quot;1-添加『友情链接』&quot;&gt;&lt;a href=&quot;#1-添加『友情链接』&quot; class=&quot;
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建博客（二），博客配置、主题和写作</title>
    <link href="http://yoursite.com/2016/09/29/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%8C%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E3%80%81%E4%B8%BB%E9%A2%98%E5%92%8C%E5%86%99%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/09/29/使用Hexo搭建博客（二），博客配置、主题和写作/</id>
    <published>2016-09-29T02:33:13.000Z</published>
    <updated>2016-09-29T03:15:23.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-博客的整体配置"><a href="#1-博客的整体配置" class="headerlink" title="1.博客的整体配置"></a>1.博客的整体配置</h3><p>　　博客的整体配置在Hexo_config.yml文件中进行。默认使用的主题是landscape，主题的配置在Hexo\themes\landscape_config.yml。主题的配置可以暂时不动，等到更换了自己满意的主题后再进行。先来说一下博客的整体配置，也就是打开Hexo_config.yml文件，更改里面的部分内容。简化起见，其他内容先不做更改，只更改# site下面的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: 冗码生涯  #填写网站名，会在标签页上显示</div><div class="line">subtitle: 只有做不好事的人，没有做不好的事  #副标题，网站名下面</div><div class="line">description: 个人博客   #网站描述，便于搜索引擎用关键词检索</div><div class="line">author: LJaer   #作者</div><div class="line">language: zh-CN     #语言，中文</div><div class="line">timezone: Asia/Shanghai     #时区</div></pre></td></tr></table></figure></p>
<p>　　更改完毕之后，启动本地预览，在浏览器中访问localhost:4000预览以下配置的效果，如果满意的话，Ctrl+C关闭预览，同步到Github上面即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g</div><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2.更换主题"></a>2.更换主题</h3><p>　　使用Hexo更换主题还算方便，先使用克隆命令安装好主题，然后更改一下博客的配置文件Hexo_config.yml里面的主题名称就好了。关于主题的选择，每个人的喜好不同，你可以到<a href="https://hexo.io/themes/" title="Hexo官方主题" target="_blank" rel="external">Hexo官方主题</a>页面选择自己喜欢的主题，里面收录的主题相对来说功能更齐全，还有<a href="https://github.com/hexojs/hexo/wiki/Themes" title="wiki" target="_blank" rel="external">wiki</a>里面的主题也还可以 。我选用的是Pacman主题。后面都是针对于Pacman主题的介绍。说明一点：使用他人的主题，一定要保留主题作者的信息（在博客最下面显示），表示对作者的尊重。</p>
<p>　　安装主题<br>　　在博客目录Ｈexo下右键点击Git Bash，输入以下命令。其他的主题也类似操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:A-limon/pacman.git</div></pre></td></tr></table></figure></p>
<p>　　启用主题<br>　　修改博客目录Ｈexo_config.yml中的theme属性，将其设置为pacman。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: pacman</div></pre></td></tr></table></figure>
<p>　　更新主题<br>　　在主题更新之前，一定要备份好主题目录下的_config.yml文件，尤其是到后面修改了很多配置之后。</p>
<p>　　到这里主题的更换就好了，启动本地预览一下，可以的话就同步到Github上面吧。</p>
<h3 id="3-主题的配置"><a href="#3-主题的配置" class="headerlink" title="3.主题的配置"></a>3.主题的配置</h3><p>　　主题的配置当然就是在Hexo\themes\pacman_config.yml文件里面了。一般而言，主题的作者都会有对主题的相关介绍，看他介绍的修改就可以了。我主要针对导航栏和右边栏小部件举例简单说明一下，后面你就知道如何配置了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">menu:  #导航栏</div><div class="line">  主页: /</div><div class="line">  归档: /archives</div><div class="line">  关于: /about  #介绍一下你自己</div><div class="line">#### Widgets </div><div class="line">widgets: ## 右边的零部件,可以根据自己喜好增减</div><div class="line">- category  #目录</div><div class="line">- links  #友情链接</div><div class="line">- tagcloud  #标签云（也可以选用标签，上面显示数值）</div><div class="line">- rss   #RSS</div><div class="line">- weibo #微博秀，需要在微博上开通</div></pre></td></tr></table></figure></p>
<p>　　导航栏上如何添加新页面呢？比如关于页面，就是输入下面命令，新建一个页面，在里添加内容即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page &quot;about&quot;</div></pre></td></tr></table></figure></p>
<p>　　导航栏里的文件都在Hexo\source\目录下，而零部件widgets的文件都在Hexo\themes\pacman\layout_widget\文件夹里，在相应的文件里修改，然后预览再部署。注意，修改任何的配置内容，都需要生成之后才有效。</p>
<h3 id="4-写作"><a href="#4-写作" class="headerlink" title="4.写作"></a>4.写作</h3><p>　　博客基本配置完成了，主题也更换了，开始写一篇文章吧！上一篇Hexo基本命令中有如何新建文章的命令，使用hexo n那个命令新建文章就好了，你也可以在博客目录Hexo\source_posts中新建一个后缀为.md的文件，使用文本编辑器在里面采用Markdown来书写，效果一样。</p>
<p>　　添加文章抬头信息<br>　　Hexo默认新建的文章抬头已有title、date、tags等属性，可能缺乏categories和meta标签，想要指定目录就需要添加categories属性，而meta标签则是为了便于搜索引擎的收录。想要修改的话，可以打开Hexo\scaffolds\post.md文件在里面添加。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title:  #文章标题</div><div class="line">date:  #时间，一般不用改</div><div class="line">categories:  #目录分类</div><div class="line">tags:  #标签，格式可以是[Hexo,总结]，中间用英文逗号分开</div><div class="line">keywords:  #文章关键词，多个关键词用英文逗号隔开</div></pre></td></tr></table></figure></p>
<p>　　文章图片的存放<br>　　想要在文章中插入图片的话，可以按照Markdown语法来插入，格式为![图片名称](图片地址)。图片的存放有两种方式：在本地Hexo\source\目录下新建一个存放图片的文件夹，比如images，然后把想要插入的图片放在里面，插入图片的路径；第二种方法是把图片上传到网络，然后插入图片路径。推荐使用第二种。<br>　　推荐两个比较好用的：</p>
<ul>
<li>图床；无需注册，方便快捷。</li>
<li>七牛云存储；需要注册，免费，空间大，速度快。<br>　　<br>到了这一步，基本的配置已经完成了，博客写作需要注意的地方也提到了。但是可能还没有完，还有一些细节的完善，或者你自己想要定制能凸显你个性的部件。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-博客的整体配置&quot;&gt;&lt;a href=&quot;#1-博客的整体配置&quot; class=&quot;headerlink&quot; title=&quot;1.博客的整体配置&quot;&gt;&lt;/a&gt;1.博客的整体配置&lt;/h3&gt;&lt;p&gt;　　博客的整体配置在Hexo_config.yml文件中进行。默认使用的主题是lan
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/28/hello-world/"/>
    <id>http://yoursite.com/2016/09/28/hello-world/</id>
    <published>2016-09-28T09:17:27.376Z</published>
    <updated>2016-09-28T09:17:27.379Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MarkDown使用技巧</title>
    <link href="http://yoursite.com/2016/09/27/MarkDown%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/09/27/MarkDown使用技巧/</id>
    <published>2016-09-27T01:16:29.000Z</published>
    <updated>2016-09-28T09:17:27.376Z</updated>
    
    <content type="html"><![CDATA[<p>1、段首空两格<br>　　输入法切换到全角，双击空格键~<br>2、添加超链接</p>
<pre><code>[an example](http://example.com/ &quot;Title&quot;) 
</code></pre><p>效果<a href="http://example.com/" title="Title" target="_blank" rel="external">an example</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、段首空两格&lt;br&gt;　　输入法切换到全角，双击空格键~&lt;br&gt;2、添加超链接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[an example](http://example.com/ &amp;quot;Title&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果&lt;a href=&quot;ht
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Git分支管理策略</title>
    <link href="http://yoursite.com/2016/09/27/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2016/09/27/Git分支管理策略/</id>
    <published>2016-09-27T01:00:05.000Z</published>
    <updated>2016-09-28T09:17:27.369Z</updated>
    
    <content type="html"><![CDATA[<p>相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称”快照”）的指针，因此非常快捷易用。</p>
<p>但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927003.png" alt="20160927003"></p>
<p><a href="http://nvie.com/" title="Vincent Driessen" target="_blank" rel="external">Vincent Driessen</a>提出了一个分支管理的<a href="http://nvie.com/posts/a-successful-git-branching-model/" title="策略" target="_blank" rel="external">策略</a>，可以使得版本库的演进保持简洁，主干清晰，各个分支各司其职、井井有条。理论上，这些策略对所有的版本管理系统都适用，Git只是用来举例而已。如果你不熟悉Git，跳过举例部分就可以了。</p>
<h3 id="1、主分支Master"><a href="#1、主分支Master" class="headerlink" title="1、主分支Master"></a>1、主分支Master</h3><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927004.png" alt="20160927004"></p>
<p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p>
<h3 id="2、开发分支Develop"><a href="#2、开发分支Develop" class="headerlink" title="2、开发分支Develop"></a>2、开发分支Develop</h3><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927005.png" alt="20160927005"></p>
<p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Develop分支进行”合并”（merge）。</p>
<p>Git创建Develop分支的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b develop master</div></pre></td></tr></table></figure></p>
<p>将Develop分支发布到Master分支的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 切换到Master分支</div><div class="line">git checkout master</div><div class="line">#对Develop分支进行合并</div><div class="line">git merge --no-ff develop</div></pre></td></tr></table></figure></p>
<p>　　<br>这里稍微解释一下，上一条命令的–no-ff参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将Master分支指向Develop分支。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927006.png" alt="20160927006"></p>
<p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的<a href="https://sandofsky.com/blog/git-workflow.html" title="《Understanding the Git Workflow》" target="_blank" rel="external">《Understanding the Git Workflow》</a>。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927007.png" alt="20160927007"></p>
<h3 id="3、临时性分支"><a href="#3、临时性分支" class="headerlink" title="3、临时性分支"></a>3、临时性分支</h3><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。<br>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">功能（feature）分支</div><div class="line">预发布（release）分支</div><div class="line">修补bug（fixbug）分支</div></pre></td></tr></table></figure>
<p>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</p>
<h3 id="4、功能分支"><a href="#4、功能分支" class="headerlink" title="4、功能分支"></a>4、功能分支</h3><p>接下来，一个个来看这三种”临时性分支”。<br>第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927008.png" alt="20160927008"></p>
<p>功能分支的名字，可以采用feature-*的形式命名。<br>创建一个功能分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b feature-x develop</div></pre></td></tr></table></figure></p>
<p>　　<br>开发完成后，将功能分支合并到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff feature-x</div></pre></td></tr></table></figure></p>
<p>删除feature分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d feature-x</div></pre></td></tr></table></figure></p>
<h3 id="5、预发布分支"><a href="#5、预发布分支" class="headerlink" title="5、预发布分支"></a>5、预发布分支</h3><p>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。<br>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>
<p>创建一个预发布分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b release-1.2 develop</div></pre></td></tr></table></figure></p>
<p>　　<br>确认没有问题后，合并到master分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge --no-ff release-1.2</div><div class="line"># 对合并生成的新节点，做一个标签</div><div class="line">git tag -a 1.2</div></pre></td></tr></table></figure></p>
<p>　　　　<br>再合并到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff release-1.2</div></pre></td></tr></table></figure></p>
<p>最后，删除预发布分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d release-1.2</div></pre></td></tr></table></figure></p>
<p>　</p>
<h3 id="6、修补bug分支"><a href="#6、修补bug分支" class="headerlink" title="6、修补bug分支"></a>6、修补bug分支</h3><p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。<br>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160927009.png" alt="20160927009"></p>
<p>创建一个修补bug分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b fixbug-0.1 master</div></pre></td></tr></table></figure></p>
<p>　　<br>修补结束后，合并到master分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge --no-ff fixbug-0.1</div><div class="line">git tag -a 0.1.1</div></pre></td></tr></table></figure></p>
<p>再合并到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff fixbug-0.1</div></pre></td></tr></table></figure></p>
<p>最后，删除”修补bug分支”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d fixbug-0.1</div></pre></td></tr></table></figure></p>
<p>　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称”快照”）的指针，因此非常快捷易用。&lt;/p&gt;
&lt;p&gt;但是，太
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建博客（四），Hexo备份与恢复</title>
    <link href="http://yoursite.com/2016/09/26/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%8CHexo%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <id>http://yoursite.com/2016/09/26/使用Hexo搭建博客（四），Hexo备份与恢复/</id>
    <published>2016-09-26T08:20:44.000Z</published>
    <updated>2016-09-29T03:17:25.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、需求："><a href="#一、需求：" class="headerlink" title="一、需求："></a>一、需求：</h3><p>在Windows和Mac下需要对Hexo进行管理和更新，或者进行重新部署环境。</p>
<h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>创建分支，一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。</p>
<h3 id="三、搭建的流程"><a href="#三、搭建的流程" class="headerlink" title="三、搭建的流程"></a>三、搭建的流程</h3><ul>
<li>1、在github上创建仓库，ljaer.github.io;</li>
<li>2、在本地创建ljaer.github.io;</li>
<li>3、在本地ljaer.github.io文件夹下一次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git;</li>
<li><p>4、在本地ljaer.github.io文件夹下<br>  创建文件.gitignore<br>  这个文件是没有后缀的，打开后写入下面两个文件夹<br>  /.deploy_git<br>  /node_modules</p>
<p>  deploy_git就是hexo d渲染并上传到github发布出去的，每次hexo d都会全部覆盖；<br>  /node_modules就是npm install生成的插件等，没必要上传，而且也上传不了。</p>
</li>
</ul>
<p>备注：<br>刚开始好多备份的教程都没有说明.gitignore文件，在恢复之后，进行hexo d之后老是报错，发在邮箱里的错误内容</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160929001.png" alt="20160929001"><br>github给邮箱发送的内容，说：有模块没有初始化，在这里所指的就是.deploy_git这个模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#git初始化</div><div class="line">git init</div><div class="line">#创建hexo分支，用来存放源码</div><div class="line">git checkout -b hexo</div><div class="line">#git 文件添加</div><div class="line">git add .</div><div class="line">#git 提交</div><div class="line">git commit -m &quot;init&quot;</div><div class="line">#添加远程仓库</div><div class="line">git remote add origin git@github.com:LJaer/ljaer.github.io.git</div><div class="line">#push到hexo分支</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<ul>
<li>5、修改_config.yml中的deploy参数，分支应为master;</li>
<li>6、依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件;</li>
<li>7、执行hexo g -d生成网站并部署到GitHub上</li>
</ul>
<p>这样一来，在GitHub上的git@github.com:LJaer/ljaer.github.io.git仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。</p>
<h3 id="四、恢复"><a href="#四、恢复" class="headerlink" title="四、恢复"></a>四、恢复</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>
<ul>
<li>1、先安装hexo<br>  $ npm install -g hexo-cli</li>
<li>2、存在github上的git clone下来<br>  git clone git@github.com:LJaer/ljaer.github.io</li>
<li>3、项目文件夹下npm<br>  $ cd 项目名/<br>  $ npm install –no-bin-links<br>  $ npm install hexo-deployer-git</li>
<li>4、重新配置github和coding的公钥</li>
</ul>
<h3 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h3><p>每次写作之后<br>先执行hexo d，把要发布的内容push到github上面了，再去弄备份</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>hexo的备份和恢复：<a href="http://jizailog.com/2016/06/13/hexo-backup/" target="_blank" rel="external">http://jizailog.com/2016/06/13/hexo-backup/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、需求：&quot;&gt;&lt;a href=&quot;#一、需求：&quot; class=&quot;headerlink&quot; title=&quot;一、需求：&quot;&gt;&lt;/a&gt;一、需求：&lt;/h3&gt;&lt;p&gt;在Windows和Mac下需要对Hexo进行管理和更新，或者进行重新部署环境。&lt;/p&gt;
&lt;h3 id=&quot;二、思路&quot;&gt;
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建博客（一），搭建博客的过程</title>
    <link href="http://yoursite.com/2016/09/24/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%8C%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/09/24/使用Hexo搭建博客（一），搭建博客的过程/</id>
    <published>2016-09-24T03:30:13.000Z</published>
    <updated>2016-09-29T02:30:55.679Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装<a href="https://git-scm.com/" title="Git" target="_blank" rel="external">Git</a></h3><p>　　根据系统（Win，Mac，Linux）选择相应的git进行安装</p>
<p>　　<a href="https://github.com/" title="注册" target="_blank" rel="external">注册</a>Github账号<br>　　因为是托管到Github上，所以需要注册一个账号。<br>　　注意一定要验证Github的验证邮件</p>
<p>　　配置SSH公钥<br>　　远程代码是基于SSH的，所以需要SSH的相关配置。方法是先在本地生成SSH公钥，然后添加到Github上面。具体的操作如下：<br>　　设置你的邮箱和用户名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.email &quot;673820543@qq.com&quot;</div><div class="line">git config --global user.name &quot;LJaer&quot;</div></pre></td></tr></table></figure></p>
<p>　　生成密钥，设置密码，输入的密码不显示（也可以不设置，按三次回车，密码为空）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;673820543@qq.com&quot;</div></pre></td></tr></table></figure></p>
<p>　　上述的命令成功后，会得到id_rsa和id_rsa.pub两个文件，可能在C:\Users\Administrator.ssh文件夹里，没有的话，就用Everything搜一下。<br>　　把SSH密钥添加到Github上<br>　　登陆Github后，点击settings，然后进入SSH keys，把id_rsa.pub文件里内容添加进去就好了。</p>
<h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装<a href="https://nodejs.org/en/" title="Node.js" target="_blank" rel="external">Node.js</a></h3><p>　　选择LTS版本进行安装</p>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>　　Hexo的安装需要借助Node.js的npm命令，可以理解为Hexo是Node.js的模块。操作的方式是在任意的位置单击鼠标右键，选择Git bash命令，在里面输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>　　卸载的话，自然是把上面命令中的install替换成uninstall即可执行卸载。</p>
<h3 id="4-创建Hexo文件夹并初始化Hexo"><a href="#4-创建Hexo文件夹并初始化Hexo" class="headerlink" title="4.创建Hexo文件夹并初始化Hexo"></a>4.创建Hexo文件夹并初始化Hexo</h3><p>　　Hexo文件夹就是你后面博客的文件夹。第一步先在某个盘符下新建一个文件夹，重命名（英文字母），假设你是在D盘下建立了一个名叫Hexo的文件夹，那么路径就是D:\hexo （后续的操作大多在这个文件夹里进行）；第二步进入Hexo文件夹单击右键，依旧选择Git bash这一命令，输入以下命令，博客所需要的文件都已经自动建立好了，这比jekyll操作简单多了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<h3 id="5-安装依赖包"><a href="#5-安装依赖包" class="headerlink" title="5.安装依赖包"></a>5.安装依赖包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="6-预览本地博客"><a href="#6-预览本地博客" class="headerlink" title="6.预览本地博客"></a>6.预览本地博客</h3><p>　　一系列的安装命令之后，本地博客就算搭建好了，输入如下的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>　　然后在浏览器地址栏中输入localhost:4000或者127.0.0.1:4000就可以查看本地的博客了。</p>
<p>　　不出意外的话，它应该是像下图这个样子的（图片来源于网络）。注意这里仅仅是本地博客，其他地方看不到。第一步操作到这里就结束了。</p>
<p><img src="http://oe53dpmqz.bkt.clouddn.com/20160929002.png" alt="201909002"></p>
<h3 id="7-建立和用户名对应的仓库"><a href="#7-建立和用户名对应的仓库" class="headerlink" title="7.建立和用户名对应的仓库"></a>7.建立和用户名对应的仓库</h3><p>　　建立和用户名相对应的仓库，比如：我的用户名是LJaer,那么我的仓库就必须是ljaer.github.io。</p>
<h3 id="8-部署远程博客"><a href="#8-部署远程博客" class="headerlink" title="8.部署远程博客"></a>8.部署远程博客</h3><p>　　编辑Hexo目录下的配置文件_config.yml,在最下面输入以下内容，注意把里面的LJaer替换成你的用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:LJaer/ljaer.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>　　部署远程博客，输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>　　出现下面的提示表示部署成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO Deploy done: git</div></pre></td></tr></table></figure></p>
<p>　　部署好了后，在浏览器地址栏中输入你的仓库名来访问，我的是ljaer.github.io。注意一点，第一次部署的话，可能需要等待一会（一般不到10分钟就好了）才能生效，以后每次部署就可以直接访问。到这里基本的博客就搭建好了。</p>
<h3 id="9-Hexo的基本命令"><a href="#9-Hexo的基本命令" class="headerlink" title="9.Hexo的基本命令"></a>9.Hexo的基本命令</h3><p>　　Hexo基本常用的命令就四个，而且还可以使用组合命令。基本命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo g = hexo generate  #生成</div><div class="line">hexo s = hexo server  #启动本地预览</div><div class="line">hexo d = hexo deploy  #远程部署</div><div class="line">hexo n &quot;文章标题&quot; = hexo new &quot;文章标题&quot;  #新建一篇博文</div></pre></td></tr></table></figure></p>
<p>　　组合命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s -g  #等同先输入hexo g，再输入hexo s</div><div class="line">hexo d -g  #等同先输入hexo g，再输入hexo d</div></pre></td></tr></table></figure></p>
<h3 id="10、注意"><a href="#10、注意" class="headerlink" title="10、注意"></a>10、注意</h3><p>　　出现其他任何的问题，先删除博客目录下的db.json文件，然后清理再部署远程博客，操作时输入以下的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>在搭建过程中，参考以下文章进行搭建</p>
<p>起今执行：<a href="http://www.jianshu.com/notebooks/1045230/latest" target="_blank" rel="external">http://www.jianshu.com/notebooks/1045230/latest</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-安装Git&quot;&gt;&lt;a href=&quot;#1-安装Git&quot; class=&quot;headerlink&quot; title=&quot;1.安装Git&quot;&gt;&lt;/a&gt;1.安装&lt;a href=&quot;https://git-scm.com/&quot; title=&quot;Git&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="技术文档" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
